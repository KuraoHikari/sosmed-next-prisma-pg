// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  images    String[] @default([])
  author    User?@relation(fields:[authorId], references:[id])
  authorId  String?
  createdAt DateTime @default(now())

   likes     Like[]
   comments   Comment[]
}



model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}


model User {
  id                    String    @id @default(cuid())
  name                  String?
  bio                   String?
  email                 String? @unique
  emailVerified         DateTime?
  image                 String?
  coverImage            String?
  profileImage          String?
  hasNotification       Boolean?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  accounts      Account[]
  sessions      Session[]

   posts          Post[]
   likes          Like[]
   comments       Comment[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  post       Post      @relation(fields: [postId], references: [id])
  postId     String
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  createdAt  DateTime  @default(now())
}
